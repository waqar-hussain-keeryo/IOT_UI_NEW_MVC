@using Newtonsoft.Json
@model IOT_UI.Models.DashboardDropdown

<h1 class="mb-5">Dashboard</h1>

<div class="row mb-5">
    <div class="col-md-3">
        <select id="customerDropdown" class="form-control">
            <option value="">Select Customer</option>
            @foreach (var item in Model.Customers)
            {
                <option value="@item.CustomerID">@item.CustomerEmail</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <select id="siteDropdown" class="form-control" disabled>
            <option value="">Select Site</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="deviceDropdown" class="form-control" disabled>
            <option value="">Select Device</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="durationDropdown" class="form-control">
            <option value="24h" selected>24 Hours</option>
            <option value="1w">1 Week</option>
            <option value="30d">1 Month</option>
        </select>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <canvas id="dashboardChart"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('dashboardChart').getContext('2d');
        let myChart;

        function initializeChart(labels = [], temperatureData = [], windSpeedData = []) {
            myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Temperature',
                            data: temperatureData,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderWidth: 1
                        },
                        {
                            label: 'Wind Speed',
                            data: windSpeedData,
                            borderColor: 'rgba(54, 162, 235, 1)',
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            title: { display: true, text: 'Time' },
                        },
                        y: {
                            title: { display: true, text: 'Value' },
                            beginAtZero: false
                        }
                    }
                }
            });
        }

        function clearChart() {
            if (myChart) {
                myChart.destroy();  // Destroy the existing chart to reset
            }
        }

        async function fetchData(duration, deviceId) {
            const response = await fetch('@Url.Action("GetChartData", "Dashboard")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ Duration: duration, DeviceId: deviceId })
            });

            if (response.ok) {
                return await response.json();
            } else {
                console.error('Error fetching data');
                return [];
            }
        }

        //24 hours records
        // function aggregateData(result, duration) {
        //     const aggregatedData = {
        //         temperature: {},
        //         windSpeed: {}
        //     };

        //     result.forEach(dp => {
        //         if (!dp.time) return; // Skip invalid data
        //         const time = new Date(dp.time);

        //         let key;
        //         if (duration === '24h') {
        //             key = `${time.getHours()}:00`;
        //         } else if (duration === '1w' || duration === '30d') {
        //             key = `${time.getFullYear()}-${time.getMonth() + 1}-${time.getDate()}`;
        //         }

        //         // Aggregate temperature
        //         if (dp.temperature !== null) {
        //             if (!aggregatedData.temperature[key]) {
        //                 aggregatedData.temperature[key] = { count: 0, total: 0 };
        //             }
        //             aggregatedData.temperature[key].count += 1;
        //             aggregatedData.temperature[key].total += dp.temperature;
        //         }

        //         // Aggregate wind speed
        //         if (dp.windSpeed !== null) {
        //             if (!aggregatedData.windSpeed[key]) {
        //                 aggregatedData.windSpeed[key] = { count: 0, total: 0 };
        //             }
        //             aggregatedData.windSpeed[key].count += 1;
        //             aggregatedData.windSpeed[key].total += dp.windSpeed;
        //         }
        //     });

        //     const labels = [];
        //     const temperatureData = [];
        //     const windSpeedData = [];

        //     for (const [key, value] of Object.entries(aggregatedData.temperature)) {
        //         labels.push(key);
        //         temperatureData.push(value.total / value.count);
        //     }

        //     for (const [key, value] of Object.entries(aggregatedData.windSpeed)) {
        //         if (labels.includes(key)) {
        //             windSpeedData.push(value.total / value.count);
        //         } else {
        //             labels.push(key);
        //             windSpeedData.push(value.total / value.count);
        //         }
        //     }

        //     return { labels, temperatureData, windSpeedData };
        // }


        //Each minute records
        function aggregateData(result, duration) {
            const aggregatedData = {
                temperature: {},
                windSpeed: {}
            };

            result.forEach(dp => {
                if (!dp.time) return; // Skip invalid data
                const time = new Date(dp.time);

                let key;
                if (duration === '24h') {
                    // Include both hour and minutes for the key in 24h duration
                    const hours = String(time.getHours()).padStart(2, '0'); // Pad single digits with leading zero
                    const minutes = String(time.getMinutes()).padStart(2, '0');
                    key = `${hours}:${minutes}`;
                } else if (duration === '1w' || duration === '30d') {
                    // Aggregation by day for week and month
                    key = `${time.getFullYear()}-${time.getMonth() + 1}-${time.getDate()}`;
                }

                // Aggregate temperature
                if (dp.temperature !== null) {
                    if (!aggregatedData.temperature[key]) {
                        aggregatedData.temperature[key] = { count: 0, total: 0 };
                    }
                    aggregatedData.temperature[key].count += 1;
                    aggregatedData.temperature[key].total += dp.temperature;
                }

                // Aggregate wind speed
                if (dp.windSpeed !== null) {
                    if (!aggregatedData.windSpeed[key]) {
                        aggregatedData.windSpeed[key] = { count: 0, total: 0 };
                    }
                    aggregatedData.windSpeed[key].count += 1;
                    aggregatedData.windSpeed[key].total += dp.windSpeed;
                }
            });

            const labels = [];
            const temperatureData = [];
            const windSpeedData = [];

            // Prepare data for charting
            for (const [key, value] of Object.entries(aggregatedData.temperature)) {
                labels.push(key);
                temperatureData.push(value.total / value.count);
            }

            for (const [key, value] of Object.entries(aggregatedData.windSpeed)) {
                if (labels.includes(key)) {
                    windSpeedData.push(value.total / value.count);
                } else {
                    labels.push(key);
                    windSpeedData.push(value.total / value.count);
                }
            }

            return { labels, temperatureData, windSpeedData };
        }

        document.getElementById('durationDropdown').addEventListener('change', async function () {
            const duration = this.value;
            const deviceId = document.getElementById('deviceDropdown').value;
            if (deviceId) {
                const result = await fetchData(duration, deviceId);
                const { labels, temperatureData, windSpeedData } = aggregateData(result, duration);
                clearChart();
                initializeChart(labels, temperatureData, windSpeedData);
            }
        });

        // Get Sites By Customer Id
        async function getSites(customerId) {
            const response = await fetch(`@Url.Action("GetSitesByCustomerId", "Dashboard")?customerId=${customerId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            });

            if (response.ok) {
                return await response.json();
            } else {
                console.error('Error fetching data');
                return [];
            }
        }

        document.getElementById('customerDropdown').addEventListener('change', async function () {
            const customerId = this.value;
            const siteDropdown = document.getElementById('siteDropdown');
            const deviceDropdown = document.getElementById('deviceDropdown');

            // Clear previous options
            siteDropdown.innerHTML = '<option value="">Select Site</option>';
            deviceDropdown.innerHTML = '<option value="">Select Device</option>';
            siteDropdown.disabled = true;
            deviceDropdown.disabled = true;

            if (customerId) {
                const result = await getSites(customerId);

                // Populate site dropdown
                result.forEach(site => {
                    const option = document.createElement('option');
                    option.value = site.siteID;
                    option.textContent = site.siteName;
                    siteDropdown.appendChild(option);
                });

                siteDropdown.disabled = false;
            }
        });

        // Get Devices By Site Id
        async function getDevices(siteId) {
            const response = await fetch(`@Url.Action("GetDevicesBySiteId", "Dashboard")?siteId=${siteId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            });

            if (response.ok) {
                return await response.json();
            } else {
                console.error('Error fetching data');
                return [];
            }
        }

        document.getElementById('siteDropdown').addEventListener('change', async function () {
            const siteId = this.value;
            const deviceDropdown = document.getElementById('deviceDropdown');

            // Clear previous options
            deviceDropdown.innerHTML = '<option value="">Select Device</option>';
            deviceDropdown.disabled = true;

            if (siteId) {
                const result = await getDevices(siteId);

                // Populate device dropdown
                result.forEach(device => {
                    const option = document.createElement('option');
                    option.value = device.deviceID;
                    option.textContent = device.deviceName;
                    deviceDropdown.appendChild(option);
                });

                deviceDropdown.disabled = false;
            }
        });

        // Show Chart By Device Id
        document.getElementById('deviceDropdown').addEventListener('change', async function () {
            const deviceId = this.value;
            const duration = document.getElementById('durationDropdown').value;
            if (deviceId) {
                const result = await fetchData(duration, deviceId);
                const { labels, temperatureData, windSpeedData } = aggregateData(result, duration);
                clearChart();
                initializeChart(labels, temperatureData, windSpeedData);
            } else {
                clearChart(); // Clear the chart if no device is selected
            }
        });
    });
</script>
