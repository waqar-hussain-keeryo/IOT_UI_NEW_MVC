@using Newtonsoft.Json
@model IOT_UI.Models.DashboardDropdown

<h1 class="mb-5">Dashboard</h1>

<div class="row mb-5">
    <div class="col-md-3">
        <select id="customerDropdown" class="form-control">
            <option value="">Select Customer</option>
            @foreach (var item in Model.Customers)
            {
                <option value="@item.CustomerID">@item.CustomerEmail</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <select id="siteDropdown" class="form-control" disabled>
            <option value="">Select Site</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="deviceDropdown" class="form-control" disabled>
            <option value="">Select Device</option>
        </select>
    </div>
    <div class="col-md-3">
        <input type="date" class="form-control" />
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <canvas id="c128Chart"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var recentData = @Html.Raw(JsonConvert.SerializeObject(Model.RecentData));

        // Prepare data for Chart.js
        var labels = [];
        var data = [];

        // Aggregation or sampling logic
        // Example: Aggregate data into hourly buckets
        var aggregatedData = {};
        recentData.forEach(dp => {
            var time = new Date(dp.Time);
            var hour = time.getHours();
            var key = `${time.getFullYear()}-${time.getMonth() + 1}-${time.getDate()} ${hour}:00`;

            if (!aggregatedData[key]) {
                aggregatedData[key] = { count: 0, total: 0 };
            }

            aggregatedData[key].count += 1;
            aggregatedData[key].total += dp.C128;
        });

        for (var [key, value] of Object.entries(aggregatedData)) {
            labels.push(key);
            data.push(value.total / value.count);  // Average value
        }

        // Initialize the Chart.js chart
        const ctx = document.getElementById('c128Chart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'C128 Values (Hourly Average)',
                    data: data,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        },
                        ticks: {
                            autoSkip: true,
                            maxTicksLimit: 20
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'C128 Value'
                        },
                        beginAtZero: false
                    }
                }
            }
        });
    });
</script>
