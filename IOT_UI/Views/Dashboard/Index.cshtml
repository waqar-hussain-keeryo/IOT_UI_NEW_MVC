@using Newtonsoft.Json
@model IOT_UI.Models.DashboardDropdown

<h1 class="mb-5">Dashboard</h1>

<div class="row mb-5">
    <div class="col-md-3">
        <select id="customerDropdown" class="form-control">
            <option value="">Select Customer</option>
            @foreach (var item in Model.Customers)
            {
                <option value="@item.CustomerID">@item.CustomerEmail</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <select id="siteDropdown" class="form-control" disabled>
            <option value="">Select Site</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="deviceDropdown" class="form-control" disabled>
            <option value="">Select Device</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="durationDropdown" class="form-control">
            <option value="">Select Duration</option>
            <option value="24h" selected>24 Hours</option>
            <option value="1w">1 Week</option>
            <option value="30d">1 Month</option>
        </select>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <canvas id="dashboardChart"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('dashboardChart').getContext('2d');
        let myChart;

        function initializeChart() {
            myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'C128 Values (Average)',
                        data: [],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: {
                            title: { display: true, text: 'Time' },
                        },
                        y: {
                            title: { display: true, text: 'C128 Value' },
                            beginAtZero: false
                        }
                    }
                }
            });
        }

        function updateChart(labels, data) {
            myChart.data.labels = labels;
            myChart.data.datasets[0].data = data;
            myChart.update();
        }

        async function fetchData(duration) {
            const response = await fetch('@Url.Action("GetChartData", "Dashboard")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ Duration: duration })
            });

            if (response.ok) {
                return await response.json();
            } else {
                console.error('Error fetching data');
                return [];
            }
        }

        function aggregateData(result, duration) {
            const aggregatedData = {};

            result.forEach(dp => {
                if (!dp.time) return; // Skip invalid data
                const time = new Date(dp.time);

                let key;
                if (duration === '24h') {
                    key = `${time.getHours()}:00`;
                } else if (duration === '1w') {
                    key = `${time.getFullYear()}-${time.getMonth() + 1}-${time.getDate()}`;
                } else if (duration === '30d') {
                    key = `${time.getFullYear()}-${time.getMonth() + 1}-${time.getDate()}`;
                }

                if (!aggregatedData[key]) {
                    aggregatedData[key] = { count: 0, total: 0 };
                }
                aggregatedData[key].count += 1;
                aggregatedData[key].total += dp.c128;
            });

            const labels = [];
            const data = [];
            for (const [key, value] of Object.entries(aggregatedData)) {
                labels.push(key);
                data.push(value.total / value.count);
            }

            return { labels, data };
        }

        document.getElementById('durationDropdown').addEventListener('change', async function () {
            const duration = this.value;
            if (duration) {
                const result = await fetchData(duration);
                const { labels, data } = aggregateData(result, duration);
                updateChart(labels, data);
            }
        });

        async function loadInitialData() {
            const result = await fetchData("24h");
            const { labels, data } = aggregateData(result, "24h");
            updateChart(labels, data);
        }

        // Initialize chart and load initial data
        initializeChart();
        loadInitialData();
    });
</script>
